// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PipeMessages.proto

#ifndef PROTOBUF_PipeMessages_2eproto__INCLUDED
#define PROTOBUF_PipeMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_PipeMessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFunctionIdentifierImpl();
void InitDefaultsFunctionIdentifier();
void InitDefaultsServerStatusImpl();
void InitDefaultsServerStatus();
void InitDefaultsClientRequestImpl();
void InitDefaultsClientRequest();
void InitDefaultsServerResponseImpl();
void InitDefaultsServerResponse();
inline void InitDefaults() {
  InitDefaultsFunctionIdentifier();
  InitDefaultsServerStatus();
  InitDefaultsClientRequest();
  InitDefaultsServerResponse();
}
}  // namespace protobuf_PipeMessages_2eproto
namespace libProtobufPipePlugin {
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class FunctionIdentifier;
class FunctionIdentifierDefaultTypeInternal;
extern FunctionIdentifierDefaultTypeInternal _FunctionIdentifier_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class ServerStatus;
class ServerStatusDefaultTypeInternal;
extern ServerStatusDefaultTypeInternal _ServerStatus_default_instance_;
}  // namespace libProtobufPipePlugin
namespace libProtobufPipePlugin {

// ===================================================================

class FunctionIdentifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libProtobufPipePlugin.FunctionIdentifier) */ {
 public:
  FunctionIdentifier();
  virtual ~FunctionIdentifier();

  FunctionIdentifier(const FunctionIdentifier& from);

  inline FunctionIdentifier& operator=(const FunctionIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionIdentifier(FunctionIdentifier&& from) noexcept
    : FunctionIdentifier() {
    *this = ::std::move(from);
  }

  inline FunctionIdentifier& operator=(FunctionIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionIdentifier* internal_default_instance() {
    return reinterpret_cast<const FunctionIdentifier*>(
               &_FunctionIdentifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FunctionIdentifier* other);
  friend void swap(FunctionIdentifier& a, FunctionIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionIdentifier* New() const PROTOBUF_FINAL { return New(NULL); }

  FunctionIdentifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FunctionIdentifier& from);
  void MergeFrom(const FunctionIdentifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FunctionIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string package = 1;
  void clear_package();
  static const int kPackageFieldNumber = 1;
  const ::std::string& package() const;
  void set_package(const ::std::string& value);
  #if LANG_CXX11
  void set_package(::std::string&& value);
  #endif
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  ::std::string* mutable_package();
  ::std::string* release_package();
  void set_allocated_package(::std::string* package);

  // string service = 2;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string function_name = 3;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 3;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // @@protoc_insertion_point(class_scope:libProtobufPipePlugin.FunctionIdentifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr package_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_PipeMessages_2eproto::TableStruct;
  friend void ::protobuf_PipeMessages_2eproto::InitDefaultsFunctionIdentifierImpl();
};
// -------------------------------------------------------------------

class ServerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libProtobufPipePlugin.ServerStatus) */ {
 public:
  ServerStatus();
  virtual ~ServerStatus();

  ServerStatus(const ServerStatus& from);

  inline ServerStatus& operator=(const ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerStatus(ServerStatus&& from) noexcept
    : ServerStatus() {
    *this = ::std::move(from);
  }

  inline ServerStatus& operator=(ServerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatus* internal_default_instance() {
    return reinterpret_cast<const ServerStatus*>(
               &_ServerStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerStatus* other);
  friend void swap(ServerStatus& a, ServerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerStatus& from);
  void MergeFrom(const ServerStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:libProtobufPipePlugin.ServerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_PipeMessages_2eproto::TableStruct;
  friend void ::protobuf_PipeMessages_2eproto::InitDefaultsServerStatusImpl();
};
// -------------------------------------------------------------------

class ClientRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libProtobufPipePlugin.ClientRequest) */ {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ClientRequest* other);
  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes request_buffer = 2;
  void clear_request_buffer();
  static const int kRequestBufferFieldNumber = 2;
  const ::std::string& request_buffer() const;
  void set_request_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_request_buffer(::std::string&& value);
  #endif
  void set_request_buffer(const char* value);
  void set_request_buffer(const void* value, size_t size);
  ::std::string* mutable_request_buffer();
  ::std::string* release_request_buffer();
  void set_allocated_request_buffer(::std::string* request_buffer);

  // .libProtobufPipePlugin.FunctionIdentifier function_identifier = 1;
  bool has_function_identifier() const;
  void clear_function_identifier();
  static const int kFunctionIdentifierFieldNumber = 1;
  const ::libProtobufPipePlugin::FunctionIdentifier& function_identifier() const;
  ::libProtobufPipePlugin::FunctionIdentifier* release_function_identifier();
  ::libProtobufPipePlugin::FunctionIdentifier* mutable_function_identifier();
  void set_allocated_function_identifier(::libProtobufPipePlugin::FunctionIdentifier* function_identifier);

  // @@protoc_insertion_point(class_scope:libProtobufPipePlugin.ClientRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_buffer_;
  ::libProtobufPipePlugin::FunctionIdentifier* function_identifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_PipeMessages_2eproto::TableStruct;
  friend void ::protobuf_PipeMessages_2eproto::InitDefaultsClientRequestImpl();
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libProtobufPipePlugin.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ServerResponse* other);
  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes response_buffer = 2;
  void clear_response_buffer();
  static const int kResponseBufferFieldNumber = 2;
  const ::std::string& response_buffer() const;
  void set_response_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_response_buffer(::std::string&& value);
  #endif
  void set_response_buffer(const char* value);
  void set_response_buffer(const void* value, size_t size);
  ::std::string* mutable_response_buffer();
  ::std::string* release_response_buffer();
  void set_allocated_response_buffer(::std::string* response_buffer);

  // .libProtobufPipePlugin.ServerStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::libProtobufPipePlugin::ServerStatus& status() const;
  ::libProtobufPipePlugin::ServerStatus* release_status();
  ::libProtobufPipePlugin::ServerStatus* mutable_status();
  void set_allocated_status(::libProtobufPipePlugin::ServerStatus* status);

  // @@protoc_insertion_point(class_scope:libProtobufPipePlugin.ServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_buffer_;
  ::libProtobufPipePlugin::ServerStatus* status_;
  mutable int _cached_size_;
  friend struct ::protobuf_PipeMessages_2eproto::TableStruct;
  friend void ::protobuf_PipeMessages_2eproto::InitDefaultsServerResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FunctionIdentifier

// string package = 1;
inline void FunctionIdentifier::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionIdentifier::package() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.FunctionIdentifier.package)
  return package_.GetNoArena();
}
inline void FunctionIdentifier::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.FunctionIdentifier.package)
}
#if LANG_CXX11
inline void FunctionIdentifier::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.FunctionIdentifier.package)
}
#endif
inline void FunctionIdentifier::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.FunctionIdentifier.package)
}
inline void FunctionIdentifier::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.FunctionIdentifier.package)
}
inline ::std::string* FunctionIdentifier::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.FunctionIdentifier.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionIdentifier::release_package() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.FunctionIdentifier.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionIdentifier::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.FunctionIdentifier.package)
}

// string service = 2;
inline void FunctionIdentifier::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionIdentifier::service() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.FunctionIdentifier.service)
  return service_.GetNoArena();
}
inline void FunctionIdentifier::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.FunctionIdentifier.service)
}
#if LANG_CXX11
inline void FunctionIdentifier::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.FunctionIdentifier.service)
}
#endif
inline void FunctionIdentifier::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.FunctionIdentifier.service)
}
inline void FunctionIdentifier::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.FunctionIdentifier.service)
}
inline ::std::string* FunctionIdentifier::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.FunctionIdentifier.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionIdentifier::release_service() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.FunctionIdentifier.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionIdentifier::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.FunctionIdentifier.service)
}

// string function_name = 3;
inline void FunctionIdentifier::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionIdentifier::function_name() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.FunctionIdentifier.function_name)
  return function_name_.GetNoArena();
}
inline void FunctionIdentifier::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.FunctionIdentifier.function_name)
}
#if LANG_CXX11
inline void FunctionIdentifier::set_function_name(::std::string&& value) {
  
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.FunctionIdentifier.function_name)
}
#endif
inline void FunctionIdentifier::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.FunctionIdentifier.function_name)
}
inline void FunctionIdentifier::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.FunctionIdentifier.function_name)
}
inline ::std::string* FunctionIdentifier::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.FunctionIdentifier.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionIdentifier::release_function_name() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.FunctionIdentifier.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionIdentifier::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.FunctionIdentifier.function_name)
}

// -------------------------------------------------------------------

// ServerStatus

// int32 code = 1;
inline void ServerStatus::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ServerStatus::code() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ServerStatus.code)
  return code_;
}
inline void ServerStatus::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.ServerStatus.code)
}

// string description = 2;
inline void ServerStatus::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStatus::description() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ServerStatus.description)
  return description_.GetNoArena();
}
inline void ServerStatus::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.ServerStatus.description)
}
#if LANG_CXX11
inline void ServerStatus::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.ServerStatus.description)
}
#endif
inline void ServerStatus::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.ServerStatus.description)
}
inline void ServerStatus::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.ServerStatus.description)
}
inline ::std::string* ServerStatus::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.ServerStatus.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStatus::release_description() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.ServerStatus.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStatus::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.ServerStatus.description)
}

// -------------------------------------------------------------------

// ClientRequest

// .libProtobufPipePlugin.FunctionIdentifier function_identifier = 1;
inline bool ClientRequest::has_function_identifier() const {
  return this != internal_default_instance() && function_identifier_ != NULL;
}
inline void ClientRequest::clear_function_identifier() {
  if (GetArenaNoVirtual() == NULL && function_identifier_ != NULL) {
    delete function_identifier_;
  }
  function_identifier_ = NULL;
}
inline const ::libProtobufPipePlugin::FunctionIdentifier& ClientRequest::function_identifier() const {
  const ::libProtobufPipePlugin::FunctionIdentifier* p = function_identifier_;
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ClientRequest.function_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::libProtobufPipePlugin::FunctionIdentifier*>(
      &::libProtobufPipePlugin::_FunctionIdentifier_default_instance_);
}
inline ::libProtobufPipePlugin::FunctionIdentifier* ClientRequest::release_function_identifier() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.ClientRequest.function_identifier)
  
  ::libProtobufPipePlugin::FunctionIdentifier* temp = function_identifier_;
  function_identifier_ = NULL;
  return temp;
}
inline ::libProtobufPipePlugin::FunctionIdentifier* ClientRequest::mutable_function_identifier() {
  
  if (function_identifier_ == NULL) {
    function_identifier_ = new ::libProtobufPipePlugin::FunctionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.ClientRequest.function_identifier)
  return function_identifier_;
}
inline void ClientRequest::set_allocated_function_identifier(::libProtobufPipePlugin::FunctionIdentifier* function_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_identifier_;
  }
  if (function_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_identifier, submessage_arena);
    }
    
  } else {
    
  }
  function_identifier_ = function_identifier;
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.ClientRequest.function_identifier)
}

// bytes request_buffer = 2;
inline void ClientRequest::clear_request_buffer() {
  request_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequest::request_buffer() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ClientRequest.request_buffer)
  return request_buffer_.GetNoArena();
}
inline void ClientRequest::set_request_buffer(const ::std::string& value) {
  
  request_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.ClientRequest.request_buffer)
}
#if LANG_CXX11
inline void ClientRequest::set_request_buffer(::std::string&& value) {
  
  request_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.ClientRequest.request_buffer)
}
#endif
inline void ClientRequest::set_request_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.ClientRequest.request_buffer)
}
inline void ClientRequest::set_request_buffer(const void* value, size_t size) {
  
  request_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.ClientRequest.request_buffer)
}
inline ::std::string* ClientRequest::mutable_request_buffer() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.ClientRequest.request_buffer)
  return request_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_request_buffer() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.ClientRequest.request_buffer)
  
  return request_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_request_buffer(::std::string* request_buffer) {
  if (request_buffer != NULL) {
    
  } else {
    
  }
  request_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_buffer);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.ClientRequest.request_buffer)
}

// -------------------------------------------------------------------

// ServerResponse

// .libProtobufPipePlugin.ServerStatus status = 1;
inline bool ServerResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void ServerResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::libProtobufPipePlugin::ServerStatus& ServerResponse::status() const {
  const ::libProtobufPipePlugin::ServerStatus* p = status_;
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ServerResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::libProtobufPipePlugin::ServerStatus*>(
      &::libProtobufPipePlugin::_ServerStatus_default_instance_);
}
inline ::libProtobufPipePlugin::ServerStatus* ServerResponse::release_status() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.ServerResponse.status)
  
  ::libProtobufPipePlugin::ServerStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::libProtobufPipePlugin::ServerStatus* ServerResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::libProtobufPipePlugin::ServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.ServerResponse.status)
  return status_;
}
inline void ServerResponse::set_allocated_status(::libProtobufPipePlugin::ServerStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.ServerResponse.status)
}

// bytes response_buffer = 2;
inline void ServerResponse::clear_response_buffer() {
  response_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::response_buffer() const {
  // @@protoc_insertion_point(field_get:libProtobufPipePlugin.ServerResponse.response_buffer)
  return response_buffer_.GetNoArena();
}
inline void ServerResponse::set_response_buffer(const ::std::string& value) {
  
  response_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libProtobufPipePlugin.ServerResponse.response_buffer)
}
#if LANG_CXX11
inline void ServerResponse::set_response_buffer(::std::string&& value) {
  
  response_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libProtobufPipePlugin.ServerResponse.response_buffer)
}
#endif
inline void ServerResponse::set_response_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libProtobufPipePlugin.ServerResponse.response_buffer)
}
inline void ServerResponse::set_response_buffer(const void* value, size_t size) {
  
  response_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libProtobufPipePlugin.ServerResponse.response_buffer)
}
inline ::std::string* ServerResponse::mutable_response_buffer() {
  
  // @@protoc_insertion_point(field_mutable:libProtobufPipePlugin.ServerResponse.response_buffer)
  return response_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_response_buffer() {
  // @@protoc_insertion_point(field_release:libProtobufPipePlugin.ServerResponse.response_buffer)
  
  return response_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_response_buffer(::std::string* response_buffer) {
  if (response_buffer != NULL) {
    
  } else {
    
  }
  response_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_buffer);
  // @@protoc_insertion_point(field_set_allocated:libProtobufPipePlugin.ServerResponse.response_buffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace libProtobufPipePlugin

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PipeMessages_2eproto__INCLUDED
